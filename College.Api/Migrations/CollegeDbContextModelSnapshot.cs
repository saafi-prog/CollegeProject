// <auto-generated />
using System;
using College.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace College.Api.Migrations
{
    [DbContext(typeof(CollegeDbContext))]
    partial class CollegeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("College.Api.Domain.Entities.Classe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NiveauNom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("niveau_nom");

                    b.Property<int?>("ProfesseurPrincipalId")
                        .HasColumnType("integer")
                        .HasColumnName("professeur_principal_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProfesseurPrincipalId");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Eleve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClasseId")
                        .HasColumnType("integer")
                        .HasColumnName("classe_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("genre");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prenom");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.ToTable("eleves", (string)null);
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Matiere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.ToTable("matieres", (string)null);
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("EleveId")
                        .HasColumnType("integer")
                        .HasColumnName("eleve_id");

                    b.Property<int>("MatiereId")
                        .HasColumnType("integer")
                        .HasColumnName("matiere_id");

                    b.Property<decimal>("NoteValue")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("valeur");

                    b.Property<int>("ProfesseurId")
                        .HasColumnType("integer")
                        .HasColumnName("professeur_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EleveId");

                    b.HasIndex("MatiereId");

                    b.HasIndex("ProfesseurId");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Professeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("genre");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prenom");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("professeurs", (string)null);
                });

            modelBuilder.Entity("College.Api.Domain.Entities.ProfesseurMatieres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MatiereId")
                        .HasColumnType("integer")
                        .HasColumnName("matiere_id");

                    b.Property<int>("ProfesseurId")
                        .HasColumnType("integer")
                        .HasColumnName("professeur_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MatiereId");

                    b.HasIndex("ProfesseurId", "MatiereId")
                        .IsUnique();

                    b.ToTable("professeur_matieres", (string)null);
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Classe", b =>
                {
                    b.HasOne("College.Api.Domain.Entities.Professeur", "ProfesseurPrincipal")
                        .WithMany("ClassesPrincipales")
                        .HasForeignKey("ProfesseurPrincipalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProfesseurPrincipal");
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Eleve", b =>
                {
                    b.HasOne("College.Api.Domain.Entities.Classe", "Classe")
                        .WithMany("Eleves")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Note", b =>
                {
                    b.HasOne("College.Api.Domain.Entities.Eleve", "Eleve")
                        .WithMany("Notes")
                        .HasForeignKey("EleveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College.Api.Domain.Entities.Matiere", "Matiere")
                        .WithMany("Notes")
                        .HasForeignKey("MatiereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College.Api.Domain.Entities.Professeur", "Professeur")
                        .WithMany("Notes")
                        .HasForeignKey("ProfesseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eleve");

                    b.Navigation("Matiere");

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("College.Api.Domain.Entities.ProfesseurMatieres", b =>
                {
                    b.HasOne("College.Api.Domain.Entities.Matiere", "Matiere")
                        .WithMany("ProfesseurMatieres")
                        .HasForeignKey("MatiereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College.Api.Domain.Entities.Professeur", "Professeur")
                        .WithMany("ProfesseurMatieres")
                        .HasForeignKey("ProfesseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matiere");

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Classe", b =>
                {
                    b.Navigation("Eleves");
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Eleve", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Matiere", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("ProfesseurMatieres");
                });

            modelBuilder.Entity("College.Api.Domain.Entities.Professeur", b =>
                {
                    b.Navigation("ClassesPrincipales");

                    b.Navigation("Notes");

                    b.Navigation("ProfesseurMatieres");
                });
#pragma warning restore 612, 618
        }
    }
}
